// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: virtualinput.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace kb {

  /// <summary>Holder for reflection information generated from virtualinput.proto</summary>
  public static partial class VirtualinputReflection {

    #region Descriptor
    /// <summary>File descriptor for virtualinput.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VirtualinputReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ2aXJ0dWFsaW5wdXQucHJvdG8SAmtiIoEBCgxWaXJ0dWFsSW5wdXQSDwoH",
            "a2V5Q29kZRgBIAMoBRInCgZjdXJzb3IYAiABKAsyFy5rYi5WaXJ0dWFsSW5w",
            "dXQuQ3Vyc29yEhUKDWlzQ3Vyc29ySW5wdXQYAyABKAgaIAoGQ3Vyc29yEgoK",
            "AmR4GAEgASgCEgoKAmR5GAIgASgCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::kb.VirtualInput), global::kb.VirtualInput.Parser, new[]{ "KeyCode", "Cursor", "IsCursorInput" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::kb.VirtualInput.Types.Cursor), global::kb.VirtualInput.Types.Cursor.Parser, new[]{ "Dx", "Dy" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VirtualInput : pb::IMessage<VirtualInput> {
    private static readonly pb::MessageParser<VirtualInput> _parser = new pb::MessageParser<VirtualInput>(() => new VirtualInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VirtualInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::kb.VirtualinputReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualInput(VirtualInput other) : this() {
      keyCode_ = other.keyCode_.Clone();
      cursor_ = other.cursor_ != null ? other.cursor_.Clone() : null;
      isCursorInput_ = other.isCursorInput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VirtualInput Clone() {
      return new VirtualInput(this);
    }

    /// <summary>Field number for the "keyCode" field.</summary>
    public const int KeyCodeFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_keyCode_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> keyCode_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> KeyCode {
      get { return keyCode_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private global::kb.VirtualInput.Types.Cursor cursor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::kb.VirtualInput.Types.Cursor Cursor {
      get { return cursor_; }
      set {
        cursor_ = value;
      }
    }

    /// <summary>Field number for the "isCursorInput" field.</summary>
    public const int IsCursorInputFieldNumber = 3;
    private bool isCursorInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCursorInput {
      get { return isCursorInput_; }
      set {
        isCursorInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VirtualInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VirtualInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keyCode_.Equals(other.keyCode_)) return false;
      if (!object.Equals(Cursor, other.Cursor)) return false;
      if (IsCursorInput != other.IsCursorInput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keyCode_.GetHashCode();
      if (cursor_ != null) hash ^= Cursor.GetHashCode();
      if (IsCursorInput != false) hash ^= IsCursorInput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keyCode_.WriteTo(output, _repeated_keyCode_codec);
      if (cursor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Cursor);
      }
      if (IsCursorInput != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCursorInput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keyCode_.CalculateSize(_repeated_keyCode_codec);
      if (cursor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cursor);
      }
      if (IsCursorInput != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VirtualInput other) {
      if (other == null) {
        return;
      }
      keyCode_.Add(other.keyCode_);
      if (other.cursor_ != null) {
        if (cursor_ == null) {
          cursor_ = new global::kb.VirtualInput.Types.Cursor();
        }
        Cursor.MergeFrom(other.Cursor);
      }
      if (other.IsCursorInput != false) {
        IsCursorInput = other.IsCursorInput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            keyCode_.AddEntriesFrom(input, _repeated_keyCode_codec);
            break;
          }
          case 18: {
            if (cursor_ == null) {
              cursor_ = new global::kb.VirtualInput.Types.Cursor();
            }
            input.ReadMessage(cursor_);
            break;
          }
          case 24: {
            IsCursorInput = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VirtualInput message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Cursor : pb::IMessage<Cursor> {
        private static readonly pb::MessageParser<Cursor> _parser = new pb::MessageParser<Cursor>(() => new Cursor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cursor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::kb.VirtualInput.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cursor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cursor(Cursor other) : this() {
          dx_ = other.dx_;
          dy_ = other.dy_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cursor Clone() {
          return new Cursor(this);
        }

        /// <summary>Field number for the "dx" field.</summary>
        public const int DxFieldNumber = 1;
        private float dx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Dx {
          get { return dx_; }
          set {
            dx_ = value;
          }
        }

        /// <summary>Field number for the "dy" field.</summary>
        public const int DyFieldNumber = 2;
        private float dy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Dy {
          get { return dy_; }
          set {
            dy_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cursor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cursor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dx, other.Dx)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dy, other.Dy)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Dx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dx);
          if (Dy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dy);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Dx != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Dx);
          }
          if (Dy != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Dy);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Dx != 0F) {
            size += 1 + 4;
          }
          if (Dy != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cursor other) {
          if (other == null) {
            return;
          }
          if (other.Dx != 0F) {
            Dx = other.Dx;
          }
          if (other.Dy != 0F) {
            Dy = other.Dy;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Dx = input.ReadFloat();
                break;
              }
              case 21: {
                Dy = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
